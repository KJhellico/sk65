; * Библиотека функций *
; * Function Library *
; SK65v50

; 04.02.2009

+0FD4000
#pragma enable old_equal_ff
0000: 0xA0002070 ; 00: void loopback0(void);
0004: 0xA0002070 ; 01: void loopback1(void);
0008: 0xA0002070 ; 02: void loopback2(void);
000C: 0xA0002070 ; 03: void loopback3(void);
0010: 0xA0002070 ; 04: void loopback4(void);
0014: 0xA020E565 ; 05: DecToHex
0018: 0xA095FBD8 ; 06: int GetAkku(int param1,int param2);
001C: 0xA0BA549D ; 07: GetLP
0020: 0xA0960A6C ; 08: long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay);
0024: 0xA097F870 ; 09: void SwitchPhoneOff(void);
0028: 0xA0945A20 ; 0A: int fopen(const char *cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber);
;002C: 0x ; 0B: int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber);
;0030: 0x ; 0C: unsigned int fwrite(int FileHandler, char *cBuffer, int iByteCount, unsigned int *ErrorNumber);
0034: 0xA0945974 ; 0D: void fclose(int FileHandler, unsigned int *ErrorNumber);
;0038: 0x ; 0E:
003C: 0xA09459D4 ; 0F: unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2);

0040: 0xA0945804 ; 10: int mkdir(const char *cFileName, unsigned int *ErrorNumber);
0044: 0xA07F051B ; 11: OpenReadCloseFile
0048: 0xA0945720 ; 12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber);
004C: 0xA094589C ; 13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber);
0050: 0xA02036DC ; 14: void *malloc(unsigned int size);
0054: 0xA0203744 ; 15: void mfree(void *);
0058: 0xA0D1C5DD ; 16: int sprintf(char *buf, char *str, ...);
005C: 0xA0D1D865 ; 17: char *strcat (char *,const char *);
0060: 0xA0D1D885 ; 18: char *strchr (const char *,int);
0064: 0xA0D1D8A8 ; 19: int strcmp (const char *,const char *);
0068: 0xA0D1D945 ; 1A: char *strcpy (char *dest,const char *source);
006C: 0xA0D1D9C5 ; 1B: unsigned int strlen(const char *);
0070: 0xA06E9255 ; 1C: void wsAppendChar(WSHDR *ws,int wchar);
0074: 0xA06E9209 ; 1D: int wsInsertChar(WSHDR *ws,int wchar,int pos);
0078: 0xA0739241 ; 1E: IMGHDR *GetPITaddr(int num);
007C: 0xA02C9E9D ; 1F: DrawMainScreen

0080: 0xA02CCCAD ; 20: DrawScreenSaver
0084: 0xA0739375 ; 21: int GetImgHeight(int picture);
0088: 0xA0739385 ; 22: int GetImgWidth(int picture);
008C: 0xA02A7809 ; 23: void DrawImg(unsigned int x, unsigned int y, unsigned int picture);
0090: 0xA0730435 ; 24: DrawImage2
0094: 0xA02A77E3 ; 25: void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one);
0098: 0xA0730375 ; 26: void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush);
009C: 0xA02A7167 ; 27: AddIconToIconbar
00A0: 0xA0D34324 ; 28: double fp_sint2fp(signed int i);
;00A4: 0x ; 29:
00A8: 0xA0961970 ; 2A: int *GetEELiteBlockAddress(short blocknum);
00AC: 0xA0D341C4 ; 2B: signed int fp_fp2sint(double f);
00B0: 0xA0944084 ; 2C: int EEFullGetBlockInfo(unsigned int block,int *size,char *version);
00B4: 0xA0D33584 ; 2D: double fp_add(double addend1, double addend2);
00B8: 0xA0D344E4 ; 2E: double fp_mul(double factor1, double factor2);
00BC: 0xA0D33B98 ; 2F: double fp_div(double divisor, double divident);

;00C0: 0x ; 30:
00C4: 0xA0D1DB0D ; 31: char *strrchr_2(const char *s,int c);
00C8: 0xA02F8600 ; 32: void PlaySound(long param1, long param2, long param3, long tone, long param5);
00CC: 0xA02EE7E4 ; 33: PlaySound2
00D0: 0xA02B2BAC ; 34: void PlaySoundLoop(int _0x2F, int param2, int duration);
00D4: 0xA04F3E6F ; 35: void AlarmClockRing(void);
;00D8: 0x ; 36: void SLI_SetState(unsigned char state);
;00DC: 0x ; 37: void Ringtones_SetState(unsigned char state);
;00E0: 0x ; 38: int Registry_GetHMIKeyID(char *Keyword);
;00E4: 0x ; 39: Registry_SetResourcePath(int HMIKeyID, int Prio, WSHDR *Path);
;00E8: 0x ; 3A: Registry_DeleteResourcePath(int HMIKeyID, int Prio);
00EC: 0xA0D1CFE1 ; 3B: MemChr
00F0: 0xA0945AA0 ; 3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber);
00F4: 0xA04918A1 ; 3D: editOrNewTXTModule
;00F8: 0x ; 3E: Registry_GetResourcePathFromLevel(int HMIKeyID, int Prio, int *HMIKeyID, WSHDR *Path);
00FC: 0xA0731099 ; 3F: char *GetPaletteAdrByColorIndex_2(int ColorIndex);

0100: 0xA0319097 ; 40: GetVibraStatus
0104: 0xA075FDC3 ; 41: GetProvider
0108: 0xA02CD3C1 ; 42: int IsScreenSaver(void);
010C: 0xA0738407 ; 43: int IsUnlocked(void);
0110: 0xA078F499 ; 44: TempLightOn
0114: 0xA0338618 ; 45: int GetWavLen(TWavLen *wl);
0118: 0xA02CC885 ; 46: int HasNewSMS(void);
011C: 0xA02CB909 ; 47: int HasFlashSMS(void);
0120: 0xA0493937 ; 48: ReadNewSMS
0124: 0xA02C810F ; 49: ReadFlashSMS
0128: 0xA02F0C5C ; 4A: short PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int CepId, int Msg, const PLAYFILE_OPT *sfo);
012C: 0xA07BB8A8 ; 4B: StartMidlet
0130: 0xA075C101 ; 4C: int GetMissedCallsCount(void);
0134: 0xA020A9D8 ; 4D: void GBS_StartTimerProc(void *htimer, long ms, void ptr());
0138: 0xA06EE3A7 ; 4E: int MsgBoxError(int flag, int LgpId);
013C: 0xA06EE405 ; 4F: int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int));

0140: 0xA06EE40F ; 50: int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int));
0144: 0xA0A55FF1 ; 51: GetNetMode
0148: 0xA0961118 ; 52: char *GetIlluminationDataTable(void);
014C: 0xA0D1D005 ; 53: int memcmp_2(void *m1,void *m2,int n);
0150: 0xA020E5A1 ; 54: int StrToInt(char *s, char **endp);
0154: 0xA03190AD ; 55: SwitchVibraOnOff
0158: 0xA0FCF421 ; 56: PlayVibra
015C: 0xA020AAE4 ; 57: IsCallAfterTimerStillRunning
0160: 0xA0D1D488 ; 58: void zeromem_2(void *dest,int n);
0164: 0xA0D1D4D0 ; 59: void *memcpy_2(void *dest,const void *source,int cnt);
0168: 0xA0737D33 ; 5A: KeypressOn
016C: 0xA0737DF1 ; 5B: KeypressOff
0170: 0xA09D6C90 ; 5C: unsigned char GetCPUClock(void);
0174: 0xA0384797 ; 5D: unsigned char GetCPULoad(void);
0178: 0xA0384765 ; 5E: GetMMIMemUsed
017C: 0xA0203750 ; 5F: int GetFreeRamAvail(void);

0180: 0xA0319289 ; 60: ShowMainMenu
0184: 0xA031E0F3 ; 61: ShowNativeMenu
;0188: 0x ; 62: SetVibraStatus
018C: 0xA02C6447 ; 63: Screen_Wallpaper_Flush
0190: 0xA06EECF1 ; 64: TriggerUpdate
0194: 0xA075D829 ; 65: void EndCall(void);
0198: 0xA070A0B7 ; 66: void EndCallBusy(int param1, int param2);
019C: 0xA02A6BB5 ; 67: IsDirectCallActive
01A0: 0xA02A3E83 ; 68: GetScreenSaverRam
01A4: 0xA020BBE0 ; 69: LockShed
01A8: 0xA020BC68 ; 6A: UnLockShed
01AC: 0xA0945758 ; 6B: int FindFirstFile (DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber);
01B0: 0xA0945794 ; 6C: int FindNextFile (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber);
01B4: 0xA09456E0 ; 6D: int FindClose (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber);
01B8: 0xA0995053 ; 6E: int IsCalling(void);
01BC: 0xA02C6CEF ; 6F: void RefreshGPRSTraffic(void);

01C0: 0xA02C6D0D ; 70: int *GetGPRSTrafficPointer(void);
01C4: 0xA072EDCB ; 71: DrawRoundRect
01C8: 0xA07582BB ; 72: unsigned short GetCurrentSecondOfCall(void);
01CC: 0xA099586B ; 73: int GetTypeOfCall(int _1);
01D0: 0xA031980F ; 74: void *GetFunctionPointer(char *_shortcut);
01D4: 0xA02C59D5 ; 75: IsCanvasBufferSet(char CanvasID)
01D8: 0xA02C5A21 ; 76: GetCanvasBufferPicPtr
01DC: 0xA07C656B ; 77: SetColor
01E0: 0xA0718BCF ; 78: GetTimeFormat
01E4: 0xA0734A15 ; 79: DrawObject2Layer(LCD_Layer *, DRWOBJ *);
01E8: 0x00000000 ; 7A: GBS_Cmd_4200_UpdateScreen
01EC: 0xA02BD7A5 ; 7B: GetProfileFilter
01F0: 0xA0968E08 ; 7C: unsigned int SetVibration(unsigned int power);
01F4: 0xA0994A6D ; 7D: IsIncognitoCall
01F8: 0xA09FD175 ; 7E: Rand
;01FC: 0x ; 7F: IsPlayerOn

0200: 0xA04F46CD ; 80: int ShowCallList(int list, int zero);
0204: 0xA0D1D760 ; 81: HexToDec
;0208: 0x ; 82: GetCurrentTrackFilename
020C: 0xA02DA1EC ; 83: GetPathOfFoundFile
0210: 0xA09458D4 ; 84: int GetFileStats(const char *cFileName, FSTATS *StatBuffer, unsigned int *errornumber);
0214: 0xA02084BD ; 85: int strcmpi(const char *s1, const char *s2);
0218: 0xA0943FAC ; 86: int EEFullReadBlock(int block, void *buf, int offset, int size, int cepid, int msg);
021C: 0xA09440F0 ; 87: int EEFullWriteBlock(int block, void *buf, int offset, int size, int cepid, int msg);
;0220: 0x ; 88: char GetAccessoryType(void);
;0224: 0x ; 89: GetLangMesIntoWS
0228: 0xA0945670 ; 8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber);
022C: 0xA0945C34 ; 8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber);
0230: 0xA02A06AC ; 8C: void RegExplorerExt(REGEXPLEXT const *);
;0234: 0x ; 8D: GetProfileName
0238: 0xA0945834 ; 8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber);
023C: 0xA094586C ; 8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber);

0240: 0xA0945B10 ; 90: int truncate(int FileHandler, int length, int *errornumber);
0244: 0xA09457D4 ; 91: int isdir(const char *cDirectory, unsigned int *ErrorNumber);
0248: 0xA07286B8 ; 92: void *calloc(size_t nelem, size_t elsize);
024C: 0xA097F87C ; 93: void RebootPhone(void);
0250: 0xA02A0770 ; 94: int ExecuteFile (WSHDR *filepath, WSHDR *mimetype, void *param);
;0254: 0x ; 95: int UnRegExplorerExt(REGEXPLEXT const *)
;0258: 0x ; 96: GetWavLenByContent
;025C: 0x ; 97: CreatePath
;0260: 0x ; 98: PlaySoundVibra
0264: 0xA02F0D84  ; 99: int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0);
0268: 0xA096A8D0  ; 9A: int ChangeVolume(unsigned char Volume);
026C: 0xA8F46C48  ; 9B: RamAudioParamsAddr
;0270: 0x ; 9C: CloseScreensaver
0274: 0xA085B86D ; 9D: GetMissedEventsPtr ???
;0278: 0x ; 9E: int GetMissedEventCount(unsigned int Event);
027C: 0xA072EC97 ; 9F: void DrawRectangle_2(int x,int y,int x2,int y2,int flags,int *pen,int *brush)
;
0280: 0xA06E87CF ; A0: int wsprintf_2(WSHDR *,const char *format,...);
0284: 0xA06E90E7 ; A1: WSHDR *wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s);
0288: 0xA06E8D53 ; A2: ws_GetChar
028C: 0xA0944EC0 ; A3: void ws_2str(WSHDR *ws, char *str, unsigned int size);
0290: 0xA06E8FC7 ; A4: WSHDR *AllocWS_2(int len);
0294: 0xA06E8911 ; A5: void FreeWS_2(WSHDR *wshdr);
0298: 0xA02C6CB5 ; A6: void ResetGPRSTraffic(void);
029C: 0xA09FFDBB ; A7: char IsGPRSEnabled(void);
02A0: 0xA09FF4A9 ; A8: char IsGPRSConnected(void);
02A4: 0xA0738A11 ; A9: void KbdLock(void);
02A8: 0xA0738CA5 ; AA: char *GetCurrentLocale(void);
02AC: 0xA0002070 ; AB: void loopback171(void);
02B0: 0xA0FCF1B1 ; AC: DrawText
02B4: 0xA0FCF0A1 ; AD: StrAnsi2Uni
02B8: 0xA0FCF0C1 ; AE: StrUni2Ansi
02BC: 0xA0FCF051 ; AF: Hex2Int

02C0: 0xA0FCF351 ; B0: DrawPicWithCanvas
02C4: 0xA0FCF371 ; B1: DrawColorPicWithCanvas
02C8: 0xA0FC3E29 ; B2: GetBuildCanvas
02CC: 0xA0FCF301 ; B3: Seconds2iTime
02D0: 0xA0717D53 ; B4: void GetDateTime(TDate *, TTime *);
02D4: 0xA0207F13 ; B5: char GetWeek(TDate*);
02D8: 0xA02BD169 ; B6: char GetProfile(void);
02DC: 0xA02BD037 ; B7: char SetProfile(char);
02E0: 0xA0D1D644 ; B8: int sdiv(int denom,int number);
02E4: 0xA0738687 ; B9: void KbdUnlock(void);
02E8: 0xA02036E8 ; BA: void *realloc(void *ptr, int size);
02EC: 0xA0D1D62C ; BB: void *memset(void *s, int c, int n);
02F0: 0xA021975C ; BC: int udiv(unsigned int denom,unsigned int number);
02F4: 0xA0D1D71C ; BD: int DivBy10(int divident);
02F8: 0xA0FC0C91 ; BE: RunScaner
02FC: 0xA0FC3001 ; BF: void SpellTime(void);

0300: 0xA0FC7601 ; C0: MiniGPS
0304: 0xA0FC0C51 ; C1: RunDispatcher
;0308: 0x ; C2: GetAllPatchesByInject
030C: 0xA0FCF3A1 ; C3: ProcessFiles
0310: 0xA0FC0C01 ; C4: void *GetBuffer(int patch_id);
0314: 0xA02A438F ; C5: char IsIdleUiOnTop(void);
;0318: 0x ; C6: char GetAkkuCapacity(void);
;031C: 0x ; C7: CallLibFunByNumber
0320: 0xA8E707E4 ; C8: unsigned short *RamCap(void);
0324: 0xA8E707E6 ; C9: unsigned short *RamLS(void);
0328: 0xA8E7CE18 ; CA: RAMNET *RamNet(void);
032C: 0xA8E7FA20 ; CB: RamRingtoneStatus
0330: 0xA8E8BDE4 ; CC: char *RamMissedCalls(void);
0334: 0xA865D158 ; CD: char *RamMissedSMS(void); // !!!heap!!!
0338: 0xA8E403AC ; CE: RamDateTime
033C: 0xA8E881DC ; CF: char *RamAlarm(void);

0340: 0xA8EB8B64 ; D0: RamAccPoint
0344: 0xA8E3A610 ; D1: RamScreensaver
0348: 0xA8E403D4 ; D2: RamAutoTime
034C: 0xA8E3A604 ; D3: RamStby
0350: 0xA865D148 ; D4: char *RamMissedMessage(void); // !!!heap!!!
0354: 0xA8E57B1C ; D5: RamIsLocked
0358: 0xA8E3ED50 ; D6: RamNetOnline
035C: 0xA8E945EA ; D7: RamScreenBrightness
0360: 0xA8E40159 ; D8: char *RamMenuAnywhere(void);
0364: 0xA8E79A04 ; D9: RamShutdownMode
0368: 0xA8EB8BD4 ; DA: RamIsShutdown
036C: 0xA8E3A644 ; DB: RamMainscreenAccuIcon
0370: 0xA8F1C3F8 ; DC: RamRandSeed
;0374: 0x ; DD: RamCurrentTrack
0378: 0xA8E7AC1D ; DE: RamIsSimPresent
037C: 0xA8E57A34 ; DF: char *RamPressedKey(void);

0380: 0xA8E4C474 ; E0: void *RamScreenBuffer(void);
;0384: 0x ; E1: unsigned int *RamMPlayer_CtrlCode(void);
0388: 0xA8E64CAC ; E2: RamKeyBuffer
038C: 0xA8E7DF14 ; E3: RamProfileNum
0390: 0xA8000350 ; E4: void *FreeRAM(void);
0394: 0x00001297 ; E5: LP_MonthsShort
0398: 0x000004AE ; E6: Pic_Big0
039C: 0x00000429 ; E7: Pic_Little0
03A0: 0x00000510 ; E8: Pic_Extra
03A4: 0x00000520 ; E9: Pic_Profiles
03A8: 0x000002D2 ; EA: Pic_Vibra
03AC: 0x00000125 ; EB: Pic_Call
03B0: 0x00000528 ; EC: Pic_AdvNet
03B4: 0x0000118B ; ED: LP_MonthsLong
03B8: 0x00000400 ; EE: LP_Weekdays
03BC: 0x00000538 ; EF: Pic_Calendar
;
03C0: 0x00000544 ; F0: Pic_AccuGraph
03C4: 0xA02C98F1 ; F1: void *BuildCanvas(void);
;03C8: 0x ; F2: lpRAM_PIT
;03CC: 0x ; F3: RAM_PIT_Cap
03D0: 0xA0D201DD  ; F4: size_t strcspn(const char *s1, const char *s2);
03D4: 0xA8E4C3C4  ; F5: Ram_LCD_Overlay_Layer
03D8: 0xA8E40D60  ; F6: RAM_LCD_Layer_Base_Ptr
;03DC: 0x ; F7:
03E0: 0xA0FE0000 ; F8: Additional_PIT_address
03E4: 0x00000509 ; F9: Additional_PIT_start
03E8: 0x00000577 ; FA: Additional_PIT_end
;03EC: 0x ; FB:
03F0: 0xA0FC0A00 ; FC: PictureRelocationTable
03F4: 0x0000F000 ; FD: PictureRelocationBase
03F8: 0x00001E1E ; FE: NextPictureMagic
03FC: 0xA0FD4000 ; FF: unsigned int AddrLibrary(void);

0400: 0xA020A248 ; 100: void GBS_SendMessage(int cepid_to, int msg, ...); //int submess, void *data1, void *data2
0404: 0xA02091E4 ; 101: int GBS_ReceiveMessage(GBS_MSG *);
0408: 0xA02098E4 ; 102: void GBS_AcceptMessage(void);
040C: 0xA020960C ; 103: void GBS_ClearMessage(void);
0410: 0xA02097DC ; 104: void GBS_PendMessage(GBS_MSG *);
0414: 0xA020A6B8 ; 105: void CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA8E38AA0 ; 106: CSMROOT *CSM_root(void);
041C: 0xA06EAEBB ; 107: int CreateCSM(const CSM_DESC *, void *, int);
0420: 0xA06EAECD ; 108: CSM_RAM *FindCSMbyID (int id);
0424: 0xA06EAF77 ; 109: void DoIDLE(void);
;0428: 0x ; 10A: void *GetConfig(unsigned int id);
;042C: 0x ; 10B: void *GetMinAdrScan(void);
;0430: 0x ; 10C: void *GetMaxAdrScan(void);
;0434: 0x ; 10D: unsigned short *GetCI(void);
;0438: 0x ; 10E: void Vibration(unsigned int power, unsigned int duration);
043C: 0xA02CB3C1 ; 10F: void freeUSSD(void);

0440: 0xA020859D ; 110: char *wstrcopy(unsigned short *dst, const unsigned short *src);
0444: 0xA02CB3FD ; 111: char GetTypeUSSD(void);
0448: 0xA02CB40D ; 112: unsigned int SetUSSD(StructUSSDStr *);
044C: 0xA0D1D995 ; 113: char *strpbrk(const char *s1,const char *s2);
0450: 0xA0D1DA11 ; 114: char *strncat(char *dest,const char *substr,int maxSubLen);
0454: 0xA0D1DA41 ; 115: int strncmp(const char *s1,const char *s2,int n);
0458: 0xA0D1DA91 ; 116: int strncpy(char *dest,const char *source,int maxlen);
045C: 0xA0D1DB0D ; 117: char *strrchr(const char *s,int c);
0460: 0xA0D1DB25 ; 118: char *strstr(const char *s1,const char *s2);
;0464: 0xA0D1DBA1 ; 119: !!!deleted!!! int strtol(const char *nptr,char **endptr,int base);
;0468: 0xA0D1DC1D ; 11A: !!!deleted!!! int strtoul(const char *nptr,char **endptr,int base);
046C: 0xA0D1C589 ; 11B: int snprintf(char *,int n,const char *format,...);
0470: 0xA0D1D005 ; 11C: int memcmp(void *m1,void *m2,int n);
0474: 0xA0D1D488 ; 11D: void zeromem(void *dest,int n);
0478: 0xA0D1D4D0 ; 11E: void *memcpy(void *dest,const void *source,int cnt);
047C: 0xA06E90E7 ; 11F: WSHDR *wstrcpy(WSHDR *wshdr_d,WSHDR *wshdr_s);

0480: 0xA06E9109 ; 120: WSHDR *wstrncpy(WSHDR *,WSHDR *,int);
0484: 0xA06E912D ; 121: WSHDR *wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s);
0488: 0xA06E91C1 ; 122: WSHDR *wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n);
048C: 0xA06E8A2B ; 123: int wstrlen(WSHDR *wshdr);
0490: 0xA06E87CF ; 124: int wsprintf(WSHDR *,const char *format,...);
0494: 0xA06E8FC7 ; 125: WSHDR *AllocWS(int len);
0498: 0xA06E93BB ; 126: void CutWSTR(void *WSHDR,int len);
049C: 0xA06E8F5F ; 127: WSHDR *CreateLocalWS(WSHDR *wshdr, unsigned __int16 *wsbody, int len);
04A0: 0xA06E8F7F ; 128: int CreateWS(void *malloc, void *mfree, int len);
04A4: 0xA06E8911 ; 129: void FreeWS(WSHDR *wshdr);
04A8: 0xA0734A41 ; 12A: void DrawObject(DRWOBJ *);
;04AC: 0x ; 12B: void AddKeybMsgHook(void *proc);
;04B0: 0x ; 12C: int AddKeybMsgHook_end(void *proc);
;04B4: 0x ; 12D: void RemoveKeybMsgHook(void *proc);
04B8: 0xA0731099 ; 12E: char *GetPaletteAdrByColorIndex(int ColorIndex);
04BC: 0xA07310BD ; 12F: void getRGBcolor(int ColorIndex, void *dest);

04C0: 0xA07310CD ; 130: void getRGBbyPaletteAdr(int *paletteAdr, void *dest);
04C4: 0xA07310EB ; 131: void setColor(int a,int r,int g,int b,void *dest);
04C8: 0xA0D1D588 ; 132: void *memmove(void *dest,const void *source,int cnt);
04CC: 0xA073566D ; 133: void StoreXYWHtoRECT(void *RECT,int x,int y,int w,int h);
04D0: 0xA0735683 ; 134: void StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2);
04D4: 0xA06EEB97 ; 135: int IsGuiOnTop(int id);
04D8: 0xA06EEC79 ; 136: int CreateGUI_ID(void *gui,int id);
04DC: 0xA06EEC89 ; 137: int CreateGUI(void *gui);
04E0: 0xA06EEC97 ; 138: int CreateGUI_30or2(void *gui);
04E4: 0xA06EECD1 ; 139: int CreateGUIWithDummyCSM(void *gui,int flag);
04E8: 0xA06EECE1 ; 13A: int CreateGUIWithDummyCSM_30or2(void *gui,int flag);
04EC: 0xA06EECF1 ; 13B: void GeneralFuncF1(int cmd);
04F0: 0xA06EECFF ; 13C: void GeneralFuncF0(int cmd);
04F4: 0xA06EED0D ; 13D: void GeneralFunc_flag1(int id,int cmd);
04F8: 0xA06EED1D ; 13E: void GeneralFunc_flag0(int id,int cmd);
04FC: 0xA06EEDAF ; 13F: void DirectRedrawGUI(void);

0500: 0xA06EEDBB ; 140: void DirectRedrawGUI_ID(int id);
0504: 0xA06EEE4B ; 141: void PendedRedrawGUI(void);
0508: 0xA072E691 ; 142: CSM_RAM *FindCSM(void *csm_q,int id);
050C: 0xA020AA74 ; 143: void GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid);
0510: 0xA020C14C ; 144: void GBS_StopTimer(GBSTMR *tmr);
0514: 0xA0206B00 ; 145: int GBS_GetCurCepid(void);
0518: 0xA020BBE0 ; 146: void LockSched(void);
051C: 0xA020BC68 ; 147: void UnlockSched(void);
0520: 0xA06EE379 ; 148: int ShowMSG(int flag, int lgp_id);
0524: 0xA07C8D8D ; 149: void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag); !!!=SetWindowText
0528: 0xA07C6601 ; 14A: void FreeDrawObject_subobj(DRWOBJ *drwobj);
052C: 0xA07C656B ; 14B: void SetColor(DRWOBJ *drwobj, int *color1, int *color2);
0530: 0xA07C8DDD ; 14C: void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush);
0534: 0xA06EEBA5 ; 14D: GUI *GetTopGUI(void);
0538: 0xA073AC3B ; 14E: void *FindItemByID(GUI *gui,int id);
053C: 0xA073AC65 ; 14F: void *GetDataOfItemByID(GUI *gui,int id);

0540: 0xA072EDCB ; 150: void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush);
0544: 0xA073034B ; 151: void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image);
0548: 0xA06EDF31 ; 152: int CreateMenu(int is_small,int zero1,const MENU_DESC *menu, const HEADER_DESC *hdr,int start_item,int n_items,void *user_pointer,int *to_remove);
054C: 0xA02090A8 ; 153: int GBS_RecActDstMessage(GBS_MSG *);
0550: 0xA0206AC4 ; 154: void KillGBSproc(int cepid);
0554: 0xA0C9AFD9 ; 155: png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn);
0558: 0xA0C9A3AD ; 156: png_infop png_create_info_struct(png_structp png_ptr);
055C: 0xA0C9BE11 ; 157: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
0560: 0xA0C9A281 ; 158: void png_set_sig_bytes(png_structp png_ptr,int num_bytes);
0564: 0xA0C9B117 ; 159: void png_read_info(png_structp png_ptr, png_infop info_ptr);
0568: 0xA0C9A9FD ; 15A: png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
056C: 0xA0C9AD9F ; 15B: png_voidp png_malloc(png_structp png_ptr, png_uint_32 size);
0570: 0xA0C9BA07 ; 15C: void png_read_image(png_structp png_ptr, png_bytepp image);
0574: 0xA0C9BA49 ; 15D: void png_read_end(png_structp png_ptr, png_infop info_ptr);
0578: 0xA0C9A69D ; 15E: png_voidp png_voidp png_get_io_ptr(png_structp png_ptr);
057C: 0xA0C9A913 ; 15F: png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr);

0580: 0xA0C9B59F ; 160: void png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row);
;0584: 0x00000000 ;-161: void png_init_io(png_structp png_ptr, int fp);
0588: 0xA0D1DE80 ; 162: int setjmp(jmp_buf jmpbuf);
058C: 0xA06EBFCD ; 163: EDITQ *AllocEQueue(void *malloc_a, void *mfree_a);
0590: 0xA06EB4A9 ; 164: EDITCONTROL *PrepareEditControl(EDITCONTROL *);
0594: 0xA06EB7B7 ; 165: void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen);
0598: 0xA06EC165 ; 166: int AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a);
059C: 0xA0735989 ; 167: int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,void *user_pointer);
05A0: 0xA099A2A9 ; 168: void SetSoftKey(void *gui,SOFTKEY_DESC *,int n);
05A4: 0xA099A24D ; 169: int ExtractEditControl(void *guidata,int n,EDITCONTROL *);
05A8: 0xA099A257 ; 16A: int StoreEditControl(void *guidata,int n,EDITCONTROL *);
05AC: 0xA094590C ; 16B: int unlink(const char *cFileName,unsigned int *errornumber);
05B0: 0xA0944DA0 ; 16C: int str_2ws(WSHDR *ws,char *str,unsigned int size);
05B4: 0xA0859C1F ; 16D: int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag);
05B8: 0xA076AC1F ; 16E: int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr);
05BC: 0xA076B421 ; 16F: int GetTypeOfAB_UNPRES_ITEM(int);

05C0: 0xA07073F5 ; 170: int MakeVoiceCall(char *number,int _0x10, int _0x20C0);
;05C4: 0x ; 171: void SUBPROC(void *,...); //(void (*)(void *, int),void *, int);
;05С8: 0x ; 172: void REDRAW(void);
05CC: 0xA09E8E11 ; 173: int socket(int af,int type,int protocol);
05D0: 0xA09E90E3 ; 174: int connect(int sock,SOCK_ADDR *,int name_length);
05D4: 0xA09E8F95 ; 175: int bind(int sock,SOCK_ADDR *,int name_length);
05D8: 0xA09E925D ; 176: int closesocket(int socket);
05DC: 0xA09E91D9 ; 177: int shutdown(int socket,int how);
05E0: 0xA09E9307 ; 178: int recv(int socket,void *buf,int len,int flag);
05E4: 0xA09E95E3 ; 179: int send(int socket,const void *buf,int len,int flag);
05E8: 0xA0A31715 ; 17A: unsigned __int16 htons(unsigned __int16);
05EC: 0xA0A31721 ; 17B: unsigned int htonl(unsigned int);
05F0: 0xA8F152F4 ; 817C: int socklasterr(void);
05F4: 0xA06EED2D ; 17D: void SetIDLETMR(int time_ms,int msg);
05F8: 0xA06EED3D ; 17E: void RestartIDLETMR(void);
05FC: 0xA06EED49 ; 17F: void DisableIDLETMR(void);

0600: 0xA099A17B ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui);
0604: 0xA099A0E5 ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws);
0608: 0xA099A121 ; 182: int EDIT_GetFocus(void *gui);
060C: 0xA099A12B ; 183: int EDIT_GetUnFocus(void *gui);
0610: 0xA06EB7EF ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item);
0614: 0xA0209DE0 ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout);
0618: 0xA09E6A2D ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *);
061C: 0xA09E745D ; 187: int RequestLMANConnect(LMAN_DATA *);
0620: 0x00000084 ; 188: int ScreenW(void);
0624: 0x000000B0 ; 189: int ScreenH(void);
0628: 0x00000012 ; 18A: int HeaderH(void);
062C: 0x00000012 ; 18B: int SoftkeyH(void);
0630: 0xA020BFF8 ; 18C: void GBS_DelTimer(GBSTMR *);
0634: 0xA08EA784 ; 18D: int available0(int sock);
0638: 0xA09FFD55 ; 18E: void GPRS_OnOff(int on, int _1);
063C: 0xA06F177F ; 18F: int GetCurMenuItem(void *gui);

0640: 0xA020B6A8 ; 190: void MutexCreate(MUTEX *mtx);
0644: 0xA020B7D4 ; 191: void MutexDestroy(MUTEX *mtx);
0648: 0xA020B954 ; 192: void MutexLock(MUTEX *mtx);
064C: 0xA020B9AC ; 193: void MutexLockEx(MUTEX *mtx, int flag);
0650: 0xA020BA08 ; 194: void MutexUnlock(MUTEX *mtx);
0654: 0xA06F2C41 ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n);
0658: 0xA06EEE25 ; 196: void RefreshGUI(void);
065C: 0xA06F2C93 ; 197: void *AllocMenuItem(void *gui);
0660: 0xA06F2DA1 ; 198: WSHDR *AllocMenuWS(void *gui, int len);
0664: 0xA06F2C13 ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons);
0668: 0xA06F2565 ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n);
066C: 0xA099A135 ; 19B: void EDIT_SetFocus(void *gui, int item)
;0670: 0x ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill);
0674: 0xA0966E2C ; 19D: long long getCpuUsedTime_if_ena(void);
0678: 0xA0966DF4 ; 19E: void StartCpuUsageCount(void);
067C: 0xA0257E15 ; 19F: int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size);

0680: 0xA0257F4B ; 1A0: int inflate(z_streamp strm, int flush);
0684: 0xA0258D87 ; 1A1: int inflateEnd(z_streamp strm);
0688: 0xA02B729D ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num);
068C: 0xA07B3644 ; 1A3: int GetCurrentGPRSProfile(void);
0690: 0xA07B35E8 ; 1A4: int GetDisconnectTime(void);
0694: 0xA02B72C7 ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk);
0698: 0xA020AAE4 ; 1A6: int IsTimerProc(GBSTMR *);
069C: 0xA070B2B7 ; 1A7: char *Get_CC_NC(void);
06A0: 0xA0C9AE9D ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
06A4: 0xA0C9BEAF ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn);
06A8: 0xA0C9B567 ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr);
06AC: 0xA0C9BFD7 ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr);
06B0: 0xA0C9A901 ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag);
06B4: 0xA0C9BFF3 ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr);
06B8: 0xA0C9CD49 ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags);
06BC: 0xA0C9BFAD ; 1AF: void png_set_strip_16(png_structp png_ptr);

06C0: 0xA0C9CCDF ; 1B0: void png_set_packing(png_structp png_ptr);
06C4: 0xA0C9C001 ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr);
06C8: 0xA0C9A2E1 ; 1B2: int png_check_sig(png_bytep sig, int num);
06CC: 0xA07319AB ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,int *pen);
06D0: 0xA072EC97 ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,int *pen,int *brush);
06D4: 0x00000000 ; 1B5: int isnewSGold(void);
06D8: 0xA09E9B03 ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID);
06DC: 0xA09EECB5 ; 1B7: unsigned int str2ip(const char *);
;06E0: 0x ; 1B8: void *EXT_TOP(void);
;06E4: 0x ; 1B9: void *PNG_TOP(void);
;06E8: 0x ; 1BA: void *LIB_TOP(void);
;06EC: 0x ; 1BB: SFN_DATA *DATA_N_SFB(void);
06F0: 0xA0C8095F ; 1BC: void SHA1_Init(SHA_CTX *c);
06F4: 0xA0C80643 ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len);
06F8: 0xA0C8083F ; 1BE: void SHA1_Final(char *md, SHA_CTX *c);
06FC: 0xA0C12391 ; 1BF: RSA *RSA_new_method(RSA_METHOD *method);

0700: 0xA0C1241F ; 1C0: void RSA_free (RSA *r);
0704: 0xA0C125EB ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa);
0708: 0xA0C0EB83 ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret);
070C: 0xA06EFD9F ; 1C3: void SetMenuItemCount(void *gui,int n);
0710: 0xA06EFD17 ; 1C4: void SetCursorToMenuItem(void *gui,int n);
0714: 0xA073907B ; 1C5: int GetFontYSIZE(int font);
0718: 0xA099A10D ; 1C6: void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec);
071C: 0xA099A117 ; 1C7: int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec);
0720: 0xA06EC31D ; 1C8: EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options);
0724: 0xA06EB443 ; 1C9: void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert);
0728: 0xA06EB437 ; 1CA: void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font);
072C: 0xA06EB42B ; 1CB: void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align);
0730: 0xA06EB415 ; 1CC: void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen);
0734: 0xA06EB3FD ; 1CD: void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush);
0738: 0xA06EB4E5 ; 1CE: void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options);
073C: 0xA029FDDC ; 1CF: REGEXPLEXT_ARM_NEW *get_regextpnt_by_uid(int uid);

0740: 0xA029FF5C ; 1D0: int GetExtUid_ws(WSHDR *ext);
0744: 0xA099A273 ; 1D1: void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *);
0748: 0xA099A27D ; 1D2: void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *);
074C: 0xA099A15D ; 1D3: int EDIT_GetCursorPos(void *gui);
0750: 0xA099A167 ; 1D4: void EDIT_SetCursorPos(void *gui, int pos);
0754: 0xA09726F0 ; 1D5: char *Get_Phone_Info(int InfoIndex);
0758: 0xA0C9BFE5 ; 1D6: void png_set_gray_1_2_4_to_8(png_structp png_ptr);
075C: 0xA0C9CDAB ; 1D7: void png_set_invert_mono(png_structp png_ptr);
0760: 0xA099A1A3 ; 1D8: int EDIT_IsMarkModeActive(void *gui);
0764: 0xA099A1B7 ; 1D9: int EDIT_GetMarkedText(void *gui,WSHDR *dest);
0768: 0xA0490F43 ; 1DA: void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag);
076C: 0xA8F725D8 ; 1DB: PDU *IncommingPDU(void);
0770: 0xA06E8CB5 ; 1DC: short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar);
0774: 0xA06E8CD7 ; 1DD: short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar);
0778: 0xA099A243 ; 1DE: int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws);
077C: 0xA099A2D9 ; 1DF: void *EDIT_GetUserPointer(void *gui);

0780: 0xA06F3CE5 ; 1E0: void *MenuGetUserPointer(void *gui);
0784: 0xA0734B2D ; 1E1: int GetSymbolWidth(int wchar,int font);
0788: 0xA0942DA3 ; 1E2: int ws_2utf8(WSHDR *from, char *to , int *result_length, int max_len);
078C: 0xA0942C8B ; 1E3: int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen);
0790: 0xA06ED995 ; 1E4: int GetPicNByUnicodeSymbol(int wchar);
0794: 0xA099A369 ; 1E5: int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add);
0798: 0xA06F1BEF ; 1E6: void Menu_SetItemCountDyn(void *gui, int n);
;079C: 0x ; 1E7: char *GetLastJavaApplication(void);
07A0: 0xA07BB1F8 ; 1E8: int IsNoJava(void);
;07A4: 0x ; 1E9: IMGHDR *CreateIMGHDRFromPngFile(const char *fname, int type);
07A8: 0xA073985B ; 1EA: int GetMaxDynIcon(void);
07AC: 0xA8E39972 ; 1EB: char *RAM_IMSI(void);
07B0: 0xA07398CF ; 1EC: void FreeDynIcon(int picture);
07B4: 0xA07398FB ; 1ED: int IsDynIconBusy(int picture);
;07B8: 0x ; 1EE: ProgressCalculate(int current, int total);
07BC: 0xA073985F ; 1EF: void SetDynIcon(int picture,IMGHDR *img,char *bitmap);

07C0: 0xA02DB710 ; 1F0: filecopy
07C4: 0xA02DD5FC ; 1F1: filecopy_op_announce
07C8: 0xA09723DC ; 1F2: devmenu_config_IsCheckboxOff
07CC: 0xA021A3AC ; 1F3: unsigned int GetSessionAge(void);
07D0: 0xA8E39D18 ; 1F4: char *RAM_SPN(void);
07D4: 0xA0D1D825 ; 1F5: int sscanf(const char *, const char *, ...);
07D8: 0xA0739927 ; 1F6: IMGHDR *GetPitAdrBy0xE200Symbol(int uni_symbol);
;07DC: 0x ; 1F7: long GetFileSize(char *Filename);
;07E0: 0x ; 1F8: int GetPlayStatus(void);
;07E4: 0x ; 1F9: void SendMP_cmd(cmd,substract);
;07E8: 0x ; 1FA: char *RamVolumeStep(void);
07EC: 0xA8E79B68 ; 1FB: char *RamMediaIsPlaying(void)
07F0: 0xA06EAFBF ; 1FC: void CloseCSM(int id);
07F4: 0xA072EC7B ; 1FD: SetProp2Square_v2
;07F8: 0x ; 1FE: char *RamLighterPower(void);
;07FC: 0x ; 1FF: void MEDIA_PLAYLAST(void);

;0800: 0x ; 200: ScreenShoot
0804: 0xA073045B ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y);
0808: 0xA084943F ; 202: void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush);
080C: 0xA073185B ; 203: void SetPixel(int x,int y,char *color);
0810: 0xA07C4EA7 ; 204: void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush);
0814: 0xA072EC55 ; 205: SetProp2Square_v1
0818: 0xA0D1D3AD ; 206: void srand(unsigned int seed);
081C: 0xA07C863F ; 207: void DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush);
0820: 0xA0734B57 ; 208: int Get_WS_width(WSHDR *ws, int font);
0824: 0xA06EAF01 ; 209: void *FindGUIbyId(int id, CSM_RAM **csm);
0828: 0xA099A1E9 ; 20A: void EDIT_SetDate(void *gui,int n,TDate *dd);
082C: 0xA099A1FD ; 20B: void EDIT_SetTime(void *gui,int n,TTime *tt);
0830: 0xA099A211 ; 20C: void EDIT_GetDate(void *gui,int n,TDate *dd);
0834: 0xA099A225 ; 20D: void EDIT_GetTime(void *gui,int n,TTime *tt);
0838: 0xA06EB771 ; 20E: int ConstructEditTime(EDITCONTROL *EditControl,TTime *time);
083C: 0xA06EB657 ; 20F: int ConstructEditDate(EDITCONTROL *EditControl,TDate *date);

0840: 0xA06EEB91 ; 210: int GetCurGuiID(void);
0844: 0x000000A1 ; 211: GBS_Cmd_4209_RefreshScreensaver
0848: 0xA03ACDE8 ; 212: int CardExplGetCurItem(void *csm);
084C: 0xA0339528 ; 213: void CardExplGetFName(void *csm, int cur_item, WSHDR *dest);
0850: 0xA06E91E9 ; 214: void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len);
0854: 0xA06E9279 ; 215: void wsRemoveChars(WSHDR *ws,int from,int to)
0858: 0xA06E882D ; 216: void wstrcarprintf(WSHDR *,const char *format,...);
085C: 0xA0536721 ; 217: int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n);
0860: 0xA099DE23 ; 218: void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int n);
0864: 0xA099E0DB ; 219: void *AllocMLMenuItem(void *data);
0868: 0xA099A2F1 ; 21A: int EDIT_SetTextInvert(void *gui,int cursor_pos,int len);
086C: 0xA099A2FB ; 21B: void EDIT_RemoveTextInvert(void *gui);
0870: 0xA099A337 ; 21C: int EDIT_IsBusy(void *gui);
0874: 0xA0705985 ; 21D: int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void));
0878: 0xA06EED89 ; 21E: void FocusGUI(int id);
087C: 0xA06EED97 ; 21F: void UnfocusGUI(void);

0880: 0xA0738A05 ; 220: IsSliderClosed ; Qwerty state (0 - open, 1 - closed, 2 - half-open)
0884: 0xA09D6C70 ; 221: void SetCpuClockLow(_2);
0888: 0xA09D6C58 ; 222: void SetCpuClockTempHi(_2);
;088C: 0x ; 223: IsMediaPlayerInBackground
;0890: 0x ; 224: CloseMediaPlayer
0894: 0xA02F0E84 ; 225: int PlayMelody_ChangeVolume(int handle,int volume);
0898: 0xA02F125C ; 226: int PlayMelody_StopPlayback(int handle);
089C: 0xA02F12FC ; 227: int PlayMelody_PausePlayback(int handle);
08A0: 0xA02F1340 ; 228: int PlayMelody_ResumePlayBack(int handle);
08A4: 0xA0D1DEA8 ; 229: void longjmp(jmp_buf, int);
08A8: 0xA070CBF3 ; 22A: void FreeGSMTXTpkt(void *pkt);
;08AC: 0x ; 22B: CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag);
;08B0: 0x ; 22C: pdcache_getval(char *return, int maxlen_of_return_str, char cachetype, char *pd_entry_identifier.class, char *pd_entry_identifier.sub);
;08B4: 0x ; 22D: pdcache_setval(char *new_value, char cachetype, char *pd_entry_identifier.class, char *pd_entry_identifier.sub);
;08B8: 0x ; 22E: OpenExplorer(ExplOpenDesc *);
08BC: 0xA8E403D0 ; 22F: TDateTimeSettings *RamDateTimeSettings(void);

08C0: 0xA0717CE3 ; 230: int GetTimeZoneShift(TDate *, TTime *, int timeZone);
08C4: 0xA8E40378 ; 231: TAppointment *RamAppointment(void);
;08C8: 0x ; 232: GBS_DestroyMessage(GBS_MSG *)
;08CC: 0x ; 233: void GetAllEmail(void)
;08D0: 0x ; 234: int GetLunarDate(struct DateInfo *pdate, struct DateInfo *pLdate);
;08D4: 0x ; 235: int GetLunarYearID(int year);
;08D8: 0x ; 236: int GetLunarAnimal(int year);
;08DC: 0x ; 237: char *RamIconBar(void);
08E0: 0xA070CB9D ; 238: void SendAutoUSSDack(void);
08E4: 0xA09443B0 ; 239: int EEFullDeleteBlock(unsigned int block,int cepid,int msg);
08E8: 0xA09444FC ; 23A: int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg);
08EC: 0xA0002070 ; 23B: void DisableIconBar(int disable); // loopback
08F0: 0xA07B3610 ; 23C: int SetCurrentGPRSProfile(int profile);
08F4: 0xA0C7D6D9 ; 23D: void MD5_Init(MD5_CTX *c);
08F8: 0xA0C7D349 ; 23E: void MD5_Update(MD5_CTX *c, const void *data, unsigned long len);
08FC: 0xA0C7D5E1 ; 23F: void MD5_Final(unsigned char *md, MD5_CTX *c);

0900: 0xA0C7E069 ; 240: char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md);
0904: 0xA0717FFB ; 241: void SetDateTime(TDate *, TTime *);
;0908: 0x ; 242: void gb2ws(WSHDR *ws, const char *s, int len);
;090C: 0x ; 243: void ws2gb(WSHDR *ws, char *s, int len);
0910: 0xA0C722D9 ; 244: int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize);
0914: 0xA0C72389 ; 245: int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5);
0918: 0xA0338618 ; 246: int GetFileProp(FILE_PROP *wl,WSHDR *file,WSHDR *folder); = GetWavLen
091C: 0xA09DF9F0 ; 247: NetOff(void);
;0920: 0x ; 248: char *RamFormatTrack(void);
;0924: 0x ; 249: char *RamFreq(void);
;0928: 0x ; 24A: char *RamChannel(void);
092C: 0xA06F30F7 ; 24B: void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc);
0930: 0xA02C2535 ; 24C: int GetPeripheryState (int device, int check_state);
0934: 0xA02F1384 ; 24D: int PlayMelody_SetPosition(int handle, int pos_ms);
0938: 0xA034CD68 ; 24E: void *GetPlayObjById(int handle);
093C: 0xA030470C ; 24F: int GetPlayObjPosition(void *playobj_3D0, int *pos_ms);

0940: 0xA0304598 ; 250: int GetPlayObjDuration(void *playobj_3D0, int *pos_ms);
;0944: 0x ; 251: unsigned int *RamSizeOfPart(void);
;0948: 0x ; 252: unsigned int *RamSizeOfRecievedSendFile(void);
;094C: 0x ; 253: char *RamLastCallNum(void);
0950: 0xA033A174 ; 254: int StartNativeExplorer(NativeExplorerData *data);
0954: 0xA06F3CE1 ; 255: void MenuSetUserPointer(void *gui,void *user_pointer);
;0958: 0x ; 256: char *RamNameOfRecievedSendFile(void);
;095C: 0x ; 257: char *RamIsSendReceiveBT(void);
0960: 0xA0739317 ; 258: int CalcBitmapSize(short w,short h, char typy);
0964: 0xA0303920 ; 259: HObj Obs_CreateObject(int uid_in, int uid_out, int prio, int msg_callback, int emb4, int sync,unsigned int *ErrorNumber);
0968: 0xA030428C ; 25A: int Obs_DestroyObject(HObj hObj);
096C: 0xA0308344 ; 25B: int Obs_SetInput_File (HObj hObj, int unk_zero, WSHDR *path);
0970: 0xA0301CF4 ; 25C: int Obs_GetInputImageSize (HObj hObj, short *w, short *h);
0974: 0xA0301E4C ; 25D: int Obs_SetOutputImageSize (HObj hObj, short w, short h);
0978: 0xA0307040 ; 25E: int Obs_Start(HObj hObj);
097C: 0xA0302914 ; 25F: int Obs_Output_GetPictstruct(HObj hObj, IMGHDR **img);

0980: 0xA0302798 ; 260: int Obs_Graphics_SetClipping(HObj hObj, short x, short y, short w, short h);
0984: 0xA0302304 ; 261: int Obs_SetRotation(HObj hObj, int angle);
0988: 0xA0306ED0 ; 262: int Obs_GetInfo (HObj hObj, int unk_0or1);
098C: 0xA03021C0 ; 263: int Obs_SetScaling (HObj hObj, int unk5);
0990: 0xA0309664 ; 264: int Obs_TranslateMessageGBS (GBS_MSG *msg, OBSevent *event_handler);
0994: 0xA0307384 ; 265: int Obs_Pause (HObj hObj);
0998: 0xA0307630 ; 266: int Obs_Resume (HObj hObj);
099C: 0xA03074AC ; 267: int Obs_Stop (HObj hObj);
;09A0: 0x ; 268: int Obs_Prepare (HObj hObj);
;09A4: 0x ; 269: int Obs_SetRenderOffset (HObj hObj,short x,short y);
09A8: 0xA03046B0 ; 26A: int Obs_SetPosition (HObj hObj,int ms);
;09AC: 0x ; 26B: int Obs_Mam_SetPurpose (HObj hObj,int ms);
;09B0: 0x ; 26C: int Obs_Sound_SetVolumeEx (HObj hObj, char vol, char delta);
;09B4: 0x ; 26D: int Obs_Sound_GetVolume (HObj hObj, char *vol);
;09B8: 0x ; 26E: int Obs_Sound_SetPurpose (HObj hObj,int purpose);
;09BC: 0x ; 26F:

;09C0: 0x ; 270:
;09C4: 0x ; 271:
;09C8: 0x ; 272:
;09CC: 0x ; 273:
;09D0: 0x ; 274:
;09D4: 0x ; 275:
;09D8: 0x ; 276:
;09DC: 0x ; 277:
;09E0: 0x ; 278:
;09E4: 0x ; 279:
;09E8: 0x ; 27A:
;09EC: 0x ; 27B:
;09F0: 0x ; 27C:
;09F4: 0x ; 27D:
;09F8: 0x ; 27E:
;09FC: 0x ; 27F:

;0A00: 0x ; 280:
;0A04: 0x ; 281: char *RamIsRunJava(void);
;0A08: 0x ; 282: char *RamIsRunCamera(void);
0A0C: 0xA02E9FA4 ; 283: int runMidletLinkablely(const char *midlet_name, WSHDR *filename);
;0A10: 0x ; 284: int IsGPRS(void);
;0A14: 0x ; 285: int IsEDGE(void);
;0A18: 0x ; 286: int GetSMSState(void);
;0A1C: 0x ; 287: int BT_GetLocVisibility(void);
;0A20: 0x ; 288: int GetCurrAudioPath(void);
;0A24: 0x ; 289: int isDecryption(void);
;0A28: 0x ; 28A: char *RamIsFileCache(void);
;0A2C: 0x ; 28B: char *RamTotalHeapSize(void);
;0A30: 0x ; 28C: char *RamTemporaryHeapSize(void);
;0A34: 0x ; 28D: char *RamBluetoothNickname(void);
;0A38: 0x ; 28E: char *RamActiveGPRSProfileName(void);
;0A3C: 0x ; 28F:

;0A40: 0x ; 290:
;0A44: 0x ; 291: int *RamCallState(void);
;0A48: 0x ; 292: int RefreshAlarmClock(void);
;0A4C: 0x ; 293: char *RamIsAlarmAutorepeatOn(void);
;0A50: 0x ; 294: char *RamAlarmclockHour(void);
;0A54: 0x ; 295: char *RamAlarmclockMinute(void);
0A58: 0xA02BCE13 ; 296: void getProfileName(int n, WSHDR *ws, int _0);
;0A5C: 0x ; 297: char *RamIsSoundRecord(void);
;0A60: 0x ; 298: char *RamIsSoundRecordQuality(void);
;0A64: 0x ; 299: char *RamExtendedCameraState(void);
;0A68: 0x ; 29A: SwitchAudioToBTHeadset(TypeOfBTHeadset, unk_0xFFFE0001)
;0A6C: 0x ; 29B: GetTypeOfBTHeadset
0A70: 0xA8E38A3D ; 29C: char *RamInputLanguage(void);
;0A74: 0x ; 29D: char *RamDisplayLanguage(void);
;0A78: 0x ; 29E:
;0A7C: 0x ; 29F:

;0A80: 0x ; 2A0: int GetAlarmclockState(int state);
;0A84: 0x ; 2A1:
;0A88: 0x ; 2A2:
0A8C: 0xA06F1C7B ; 2A3: void UpdateMenuCursorItem(void *gui, int n);
0A90: 0xA06EF2DF ; 2A4: void *GetMenuGUI(void *malloc_adr, void *mfree_adr);
0A94: 0xA099DC9D ; 2A5: void *GetMultiLinesMenuGUI(void *malloc_adr, void *mfree_adr);
0A98: 0xA029FC81 ; 2A6: void SetHeaderToMenu(void *gui, const HEADER_DESC *hdr, void *malloc_adr);
0A9C: 0xA06F2871 ; 2A7: void SetMenuToGUI(void *gui, const void *menu_desc);//MENU_DESC,ML_MENU_DESC
0AA0: 0xA06EFEAF ; 2A8: int GetMenuItemCount(void *gui);
0AA4: 0xA06EE1F7 ; 2A9: int CreatePopupGUI(int flag, void *user_pointer, const POPUP_DESC *, int lgp_msg);
0AA8: 0xA06EE169 ; 2AA: int CreatePopupGUI_ws(int flag, void *user_pointer, const POPUP_DESC *, WSHDR *msg);
0AAC: 0xA073C5E5 ; 2AB: void *GetPopupUserPointer(void *gui);
;0AB0: 0x ; 2AC: int DeleteSMS(int index, short *del_cnt);
;0AB4: 0x ; 2AD: int SetSmsStatus(int index, int type);
0AB8: 0xA06F32CF ; 2AE: void *GetHeaderPointer(void *gui);
0ABC: 0xA094C549 ; 2AF: void SetHeaderText(void *hdr_pointer, WSHDR *txt, void *malloc_adr, void *mfree_adr);

0AC0: 0xA06F3BAB ; 2B0: void SetMenuSoftKey(void *gui, const SOFTKEY_DESC *,int n);
;0AC4: 0x ; 2B1: SMS_DATA_ROOT *SmsDataRoot(void);
0AC8: 0xA0A02205 ; 2B2: int GetSmsPosIndex(SMS_POS_INDEX_DATA *buf, int data_id);
0ACC: 0xA049AC9D ; 2B3: NativeAbData *AllocNativeAbData(void);
0AD0: 0xA049AD23 ; 2B4: int FreeNativeAbData(NativeAbData *ab_data);
0AD4: 0xA049AE87 ; 2B5: int GetNativeAbDataType(NativeAbData *nab, int unk0); //unk0=0
0AD8: 0xA049B223 ; 2B6: WSHDR *GetNumFromNativeAbData(NativeAbData *nab, int type, int unk0); //unk0=0
0ADC: 0xA049AE9B ; 2B7: int GetNativeAbDataStatus(NativeAbData *nab, int _0); //9,not filled, 1, filled
0AE0: 0xA049B303 ; 2B8: int SetNumToNativeAbData(NativeAbData *abd, int unk, WSHDR *num); //unk=0x1D, maxlen ?, type ?
0AE4: 0xA049A1A9 ; 2B9: unsigned int OpenNativeAddressbook(int type, int unk1, int unk2, void *data); //type, 0x4, select num
;0AE8: 0x ; 2BA: void SetHeaderIcon(void *hdr_pointer, const int *icon, void *malloc_adr, void *mfree_adr);
;0AEC: 0x ; 2BB: void *GetTabGUI(void *malloc_adr, void *mfree_adr);
;0AF0: 0x ; 2BC: void SetGUIDefinition(void *gui, const void *definition);
;0AF4: 0x ; 2BD: int SetGUIToTabGUI(void *tabgui, int n, const int *tabicons, void *gui);
;0AF8: 0x ; 2BE: int SetCursorTab(void *tab_gui, int n);
;0AFC: 0x ; 2BF: int UpdateTab1stItem(void *tab_gui, int unk_0);

;0B00: 0x ; 2C0: int GetCursorTab(void *tab_gui);
;0B04: 0x ; 2C1: void *GetGuiByTab(void *tab_gui, int n);
0B08: 0xA075FBC5 ; 2C2: int GetSubprovider(WSHDR* ws);
0B0C: 0xA075FDD9 ; 2C3: int GetRoamingState(void);
;0B10: 0x ; 2C4: int GetProfileVolumeSetting(int profile, int type);
;0B14: 0x ; 2C5: RAM_EMS_ADMIN *RAM_EMS_Admin();
0B18: 0xA020DCBF ; 2C6: int GetSecondsFromDateTime(int *result, TDate *t_date, TTime *time, TDate *s_date);
0B1C: 0xA020DD11 ; 2C7: int GetSecondsFromDateTimeSince1997(int *result, TDate *date, TTime *time);
0B20: 0xA020E103 ; 2C8: int GetSecondsFromTime(TTime *time);
0B24: 0xA020DBF9 ; 2C9: int GetDateTimeFromSeconds(int *seconds, TDate *t_date, TTime *time, TDate *s_date);
0B28: 0xA020DD33 ; 2CA: int GetDateTimeFromSecondsSince1997(int *seconds, TDate *date, TTime *time);
0B2C: 0xA020E115 ; 2CB: void GetTimeFromSeconds(TTime *time, int seconds);
0B30: 0xA020828F ; 2CC: void InitDate(TDate *date, unsigned long year, unsigned char month, unsigned char day);
0B34: 0xA02083D3 ; 2CD: void InitTime(TDate *time, unsigned char hour, unsigned char min, unsigned char sec, unsigned long millisec);
0B38: 0xA0207DB5 ; 2CE: int CmpDates(TDate *date1, TDate *date2);
0B3C: 0xA020E0A5 ; 2CF: int CmpTimes(TTime *time1, TTime *time2);
0B40: 0xA0207E05 ; 2D0: int GetDaysFromMonth(TDate *date);
0B44: 0xA0207DE5 ; 2D1: int IsLeapYear(TDate *date);
0B48: 0xA04B9143 ; 2D2: void StartNativeBrowserCore(void);

#pragma disable old_equal_ff
+0